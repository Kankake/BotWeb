import dotenv from 'dotenv';
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import fs from 'fs/promises';
import { Telegraf, Markup } from 'telegraf';
import XLSX from 'xlsx';
import fetch from 'node-fetch';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const WELCOME_PHOTO = path.join(__dirname, 'public', 'assets', 'welcome.jpg');
const NEXT_PHOTO = path.join(__dirname, 'public', 'assets', 'next.jpg');

dotenv.config();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const WEBAPP_URL = process.env.WEBAPP_URL;
const PORT = process.env.PORT || 3000;
const WEBHOOK_PATH = '/tg-webhook';

if (!BOT_TOKEN || !ADMIN_CHAT_ID || !WEBAPP_URL) {
  console.error('‚ùå Missing BOT_TOKEN, ADMIN_CHAT_ID or WEBAPP_URL');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
async function isAdminUser(ctx) {
  return ctx.chat.id.toString() === ADMIN_CHAT_ID;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const initDataDir = async () => {
  const dataDir = path.join(__dirname, 'public', 'data');
  try {
    await fs.access(dataDir);
  } catch {
    await fs.mkdir(dataDir, { recursive: true });
  }

  const schedulesPath = path.join(dataDir, 'schedules.json');
  try {
    await fs.access(schedulesPath);
  } catch {
    await fs.writeFile(schedulesPath, '{}');
  }
};

await initDataDir();

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
let schedules = {};
try {
  const dataPath = path.join(__dirname, 'public', 'data', 'schedules.json');
  const data = await fs.readFile(dataPath, 'utf8');
  schedules = JSON.parse(data);
  console.log('‚úÖ Loaded schedules from data/schedules.json');
} catch (err) {
  console.error('‚ùå Failed to load schedules.json:', err);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);
const pendingReminders = new Map();
const awaitingScheduleUpload = new Set();
const awaitingCustomName = new Set();
const pendingBookings = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
try {
  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const publicCommands = [
    { command: 'start', description: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' },
    { command: 'contacts', description: '–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏' }
  ];
  await bot.telegram.setMyCommands(publicCommands);

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ –µ–≥–æ —á–∞—Ç–µ)
  const adminCommands = [
    { command: 'update_schedule', description: '–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' }
  ];
  await bot.telegram.setMyCommands(adminCommands, {
    scope: { type: 'chat', chat_id: Number(ADMIN_CHAT_ID) }
  });
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:', err);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Excel (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ JSON)
async function updateScheduleFromExcel(filePath) {
  const workbook = XLSX.readFile(filePath);
  const sheet = workbook.Sheets[workbook.SheetNames[0]];
  const data = XLSX.utils.sheet_to_json(sheet);

  const newSchedules = {};

  data.forEach(row => {
    let dateValue = row.date;
    if (typeof dateValue === 'number') {
      dateValue = new Date((dateValue - 25569) * 86400 * 1000);
    } else {
      dateValue = new Date(dateValue);
    }
    const formattedDate = dateValue.toISOString().split('T')[0];

    if (!newSchedules[row.address]) {
      newSchedules[row.address] = [];
    }

    newSchedules[row.address].push({
      date: formattedDate,
      time: row.time,
      direction: row.direction.trim(),
      address: row.address.trim()
    });
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º
  const filePathSave = path.join(__dirname, 'public', 'data', 'schedules.json');
  await fs.writeFile(filePathSave, JSON.stringify(newSchedules, null, 2));
  schedules = newSchedules;

  console.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Excel');
  return newSchedules;
}

// –ö–æ–º–∞–Ω–¥–∞ /check_data –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
bot.command('check_data', async (ctx) => {
  if (ctx.chat.id.toString() !== ADMIN_CHAT_ID) return;

  const dataStr = JSON.stringify(schedules, null, 2);
  const chunkSize = 4000;
  for (let i = 0; i < dataStr.length; i += chunkSize) {
    await ctx.reply(dataStr.slice(i, i + chunkSize));
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /update_schedule –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
bot.command('update_schedule', (ctx) => {
  if (!isAdminUser(ctx)) return;
  awaitingScheduleUpload.add(ctx.chat.id);
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.on('document', async (ctx) => {
  try {
    if (!awaitingScheduleUpload.has(ctx.chat.id)) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /update_schedule');
    }
    awaitingScheduleUpload.delete(ctx.chat.id);

    const fileId = ctx.message.document.file_id;
    const fileLink = await ctx.telegram.getFileLink(fileId);
    const response = await fetch(fileLink.href);
    const buffer = await response.buffer();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(sheet);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    const schedule = {};
    data.forEach(row => {
      const day = row.Day || row.date || row.Date; // –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
      const time = row.Time || row.time || '';
      const name = row.Name || row.name || '';
      if (!schedule[day]) schedule[day] = [];
      schedule[day].push({ time, name });
    });

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    const filePath = path.join(__dirname, 'public', 'data', 'schedules.json');
    await fs.writeFile(filePath, JSON.stringify(schedule, null, 2));
    schedules = schedule;

    ctx.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error(error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  const firstName = ctx.from.first_name || '–∫–ª–∏–µ–Ω—Ç';
  const chatId = ctx.chat.id;

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (pendingReminders.has(chatId)) {
    const { t3, t15, t24 } = pendingReminders.get(chatId);
    clearTimeout(t3);
    clearTimeout(t15);
    clearTimeout(t24);
  }

  // –¢–∞–π–º–µ—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  const t3 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! üèÉ‚Äç‚ôÄÔ∏è –ú–µ—Å—Ç–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è ‚Äî —É—Å–ø–µ–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë!`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 3 * 60 * 60 * 1000);

  const t15 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 15 * 60 * 1000);

  const t24 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 24 * 60 * 60 * 1000);

  pendingReminders.set(chatId, { t3, t15, t24 });

  await ctx.replyWithPhoto({ source: WELCOME_PHOTO });

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –Ω–∞—à –±—É–¥—É—â–∏–π –∫–ª–∏–µ–Ω—Ç!\n` +
    `–Ø –õ–µ—è ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–∏–∏ –±–∞–ª–µ—Ç–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∏ LEVITA!\n\n` +
    `–ú–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏ "${firstName}", –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–Ω–æ —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ?`,
    Markup.keyboard([['–î–∞', '–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è']])
      .resize()
      .oneTime()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–î–∞" –Ω–∞ –∏–º—è
bot.hears('–î–∞', async (ctx) => {
  await ctx.replyWithPhoto({ source: NEXT_PHOTO });
  return ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ]).resize()
  );
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω"
bot.hears('üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', (ctx) => {
  ctx.reply(
    '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É:',
    Markup.inlineKeyboard([
      Markup.button.webApp('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ', WEBAPP_URL)
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ "üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
bot.hears('üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', (ctx) => {
  return ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∏ –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.',
    Markup.keyboard([
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', { text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true }]
    ]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => {
  return ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ]).resize()
  );
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å—Ç—É–¥–∏–∏
bot.hears('–ö–æ–Ω—Ç–∞–∫—Ç—ã', (ctx) => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
    –°–≤–æ–±–æ–¥—ã 6 ‚Äî 8-928-00-00-000
    –í–∏–¥–æ–≤–∞ 210–î ‚Äî 8-928-00-00-000
    –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî 8-928-00-00-000`
  );
});

// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è
bot.hears('–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è', async (ctx) => {
  awaitingCustomName.add(ctx.chat.id);
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
bot.on('text', async (ctx) => {
  if (!awaitingCustomName.has(ctx.chat.id)) return;
  awaitingCustomName.delete(ctx.chat.id);

  const firstName = ctx.message.text;

  await ctx.replyWithPhoto({ source: NEXT_PHOTO });
  await ctx.reply(
    `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${firstName}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω"
bot.hears('üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', (ctx) => {
  ctx.reply(
    '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É:',
    Markup.inlineKeyboard([
      Markup.button.webApp('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ', WEBAPP_URL)
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ "üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
bot.hears('üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', (ctx) => {
  return ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∏ –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.',
    Markup.keyboard([
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', { text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true }]
    ]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => {
  return ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ]).resize()
  );
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å—Ç—É–¥–∏–∏
bot.hears('–ö–æ–Ω—Ç–∞–∫—Ç—ã', (ctx) => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
–°–≤–æ–±–æ–¥—ã 6 ‚Äî 8-928-00-00-000
–í–æ–∫–∑–∞–ª—å–Ω–∞—è 7 ‚Äî 8-928-00-00-001
–ú–∏—Ä–∞ 31 ‚Äî 8-928-00-00-002`
  );
});

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–µ–±—Ö—É–∫–∞
const app = express();
  app.use(express.json());
  app.use(express.static(path.join(__dirname, 'public')));

  // Endpoints
  app.post('/slots', (req, res) => {
    const { direction, address } = req.body;
    const today = new Date();
    console.log('REQUEST direction:', direction, '| address:', address);
    const arr = schedules[address] || [];
    console.log('SLOTS directions:', arr.map(s => '[' + s.direction + ']'));
    const slots = arr
      .filter(slot => {
        const d = new Date(slot.date);
        const diff = (d - today) / (1000 * 60 * 60 * 24);
        const match = slot.direction.trim() === direction.trim();
        if (match && diff >= 0 && diff < 3) {
          console.log('MATCH:', slot.direction, '|', direction, '|', slot.date, slot.time);
        }
        return match && diff >= 0 && diff < 3;
      })
      .map(slot => ({ date: slot.date, time: slot.time }));
    res.json({ ok: true, slots });
  });

  app.get('/json', async (_req, res) => {
    try {
      const filePath = path.join(__dirname, 'public', 'data', 'schedules.json');
      const data = await fs.readFile(filePath, 'utf8');
      res.json(JSON.parse(data));
    } catch (err) {
      res.status(500).send('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞');
    }
  });

  app.post('/submit', async (req, res) => {
    try {
      const bookingData = req.body;
      // Store booking data
      pendingBookings.set(bookingData.telegram_id, bookingData);
      
      await bot.telegram.sendMessage(
        bookingData.telegram_id,
        '–°–ø–∞—Å–∏–±–æ! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.',
        {
          reply_markup: {
            keyboard: [[{ text: 'üì≤ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', request_contact: true }]],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        }
      );
      
      res.json({ ok: true });
    } catch (err) {
      console.error('Error in /submit:', err);
      res.status(500).json({ ok: false, error: err.message });
    }
  });

  bot.on('contact', async (ctx) => {
  const contact = ctx.message.contact;
  const telegramId = ctx.from.id;

  const bookingData = pendingBookings.get(telegramId);
  if (!bookingData) {
    return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å–Ω–æ–≤–∞.');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  bookingData.phone = contact.phone_number;

  try {
    await sendBookingToAdmin(bookingData);
    await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
    pendingBookings.delete(telegramId);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});


  async function sendBookingToAdmin(bookingData) {
    const { goal, direction, address, firstName, phone, slot, telegram_id } = bookingData;
    
    const msg = `–ù–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫–∞:
      –¶–µ–ª—å: ${goal}
      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}
      –°—Ç—É–¥–∏—è: ${address}
      –°–ª–æ—Ç: ${slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
      –ò–º—è: ${firstName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
      ID: ${telegram_id}`;
      
    return await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
  }

app.use(bot.webhookCallback(WEBHOOK_PATH));

app.post(WEBHOOK_PATH, async (req, res) => {
  try {
    await bot.handleUpdate(req.body);
    res.status(200).send('ok');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    res.status(500).send('Error');
  }
});

app.listen(PORT, async () => {
  console.log(`Server listening on port ${PORT}`);

  const webhookUrl = `${WEBAPP_URL}${WEBHOOK_PATH}`;
  try {
    await bot.telegram.setWebhook(webhookUrl);
    console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É ${webhookUrl}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err);
  }
});
