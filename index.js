import dotenv from 'dotenv';
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import fs from 'fs/promises';
import { Telegraf, Markup } from 'telegraf';
import XLSX from 'xlsx';
import fetch from 'node-fetch';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const WELCOME_PHOTO = path.join(__dirname, 'public', 'assets', 'welcome.jpg');
const NEXT_PHOTO = path.join(__dirname, 'public', 'assets', 'next.jpg');

dotenv.config();

// Load config from .env
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const WEBAPP_URL = process.env.WEBAPP_URL;
const PORT = process.env.PORT || 3000;
const WEBHOOK_PATH = '/tg-webhook';

const awaitingScheduleUpload = new Set();
const awaitingCustomName = new Set();
// –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–º–µ–Ω
const userNames = new Map();
// –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
const botUsers = new Set();

if (!BOT_TOKEN || !ADMIN_CHAT_ID || !WEBAPP_URL) {
  console.error('‚ùå Missing BOT_TOKEN, ADMIN_CHAT_ID or WEBAPP_URL');
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
async function isAdminUser(ctx) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
  if (ctx.chat.id.toString() === ADMIN_CHAT_ID) {
    return true;
  }
  return false;
}

// Add after imports
const initDataDir = async () => {
  const dataDir = path.join(__dirname, 'public', 'data');
  try {
    await fs.access(dataDir);
  } catch {
    await fs.mkdir(dataDir, { recursive: true });
  }
  
  const schedulesPath = path.join(dataDir, 'schedules.json');
  try {
    await fs.access(schedulesPath);
  } catch {
    await fs.writeFile(schedulesPath, '{}');
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const usersPath = path.join(dataDir, 'users.json');
  try {
    await fs.access(usersPath);
  } catch {
    await fs.writeFile(usersPath, '[]');
  }
};

await initDataDir();

// Load monthly-updatable schedule from JSON file
let schedules = {};
try {
  const dataPath = path.join(__dirname, 'public', 'data', 'schedules.json');
  const data = await fs.readFile(dataPath, 'utf8');
  schedules = JSON.parse(data);
  console.log('‚úÖ Loaded schedules from data/schedules.json');
} catch (err) {
  console.error('‚ùå Failed to load schedules.json:', err);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
try {
  const usersPath = path.join(__dirname, 'public', 'data', 'users.json');
  const usersData = await fs.readFile(usersPath, 'utf8');
  const loadedUsers = JSON.parse(usersData);
  loadedUsers.forEach(user => botUsers.add(user));
  console.log(`‚úÖ Loaded ${botUsers.size} users from data/users.json`);
} catch (err) {
  console.error('‚ùå Failed to load users.json:', err);
}

// Initialize bot
const bot = new Telegraf(BOT_TOKEN);
const pendingReminders = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
async function saveUsersToFile() {
  try {
    const usersPath = path.join(__dirname, 'public', 'data', 'users.json');
    const usersArray = Array.from(botUsers);
    await fs.writeFile(usersPath, JSON.stringify(usersArray, null, 2));
    console.log(`üíæ Saved ${usersArray.length} users to file`);
  } catch (err) {
    console.error('‚ùå Failed to save users to file:', err);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function addUser(userId) {
  if (!botUsers.has(userId)) {
    botUsers.add(userId);
    await saveUsersToFile();
    console.log(`üë§ New user added: ${userId}`);
  }
}

bot.command('check_data', async (ctx) => {
  if (ctx.chat.id.toString() !== ADMIN_CHAT_ID) return;
  
  // Split data into smaller chunks
  const data = JSON.stringify(schedules, null, 2);
  const chunkSize = 4000; // Leave some buffer
  
  for (let i = 0; i < data.length; i += chunkSize) {
    const chunk = data.slice(i, i + chunkSize);
    await ctx.reply(chunk);
  }
});

// Set up menu commands
try {
  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É start)
  const publicCommands = [
    { command: 'start', description: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' },
    { command: 'contacts', description: '–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏' }
  ];
  await bot.telegram.setMyCommands(publicCommands);

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É update_schedule)
  const adminGroupCommands = [
    { command: 'update_schedule', description: '–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' },
    { command: 'cancel_schedule', description: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' },
    { command: 'users_count', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
    { command: 'broadcast', description: '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è' }
  ];
  await bot.telegram.setMyCommands(adminGroupCommands, {
    scope: { type: 'chat', chat_id: Number(ADMIN_CHAT_ID) }  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
  });

} catch (err) {
  console.log('Command menu setup:', err);
}

// Update schedule function
async function updateScheduleFromExcel(filePath) {
  const workbook = XLSX.readFile(filePath);
  const sheet = workbook.Sheets[workbook.SheetNames[0]];
  const data = XLSX.utils.sheet_to_json(sheet);

  const schedules = {};

  data.forEach(row => {
    // Convert Excel date to YYYY-MM-DD format
    let dateValue = row.date;
    if (typeof dateValue === 'number') {
      // If Excel date is stored as number
      dateValue = new Date((dateValue - 25569) * 86400 * 1000);
    } else {
      // If date is string, parse it
      dateValue = new Date(dateValue);
    }
    const formattedDate = dateValue.toISOString().split('T')[0];

    if (!schedules[row.address]) {
      schedules[row.address] = [];
    }

    const orderedEntry = {
      date: formattedDate,
      time: row.time,
      direction: row.direction.trim(), // Add trim() to normalize strings
      address: row.address.trim()
    };

    schedules[row.address].push(orderedEntry);
  });

  // Add console.log to verify data structure
  console.log('Generated schedules:', schedules);

  await fs.writeFile(
    path.join(__dirname, 'public', 'data', 'schedules.json'),
    JSON.stringify(schedules, null, 2)
  );

  return schedules;
}

bot.start(async ctx => {
  const firstName = ctx.from.first_name || '–∫–ª–∏–µ–Ω—Ç';
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
  await addUser(userId);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–∑ Telegram –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
  userNames.set(chatId, firstName);
  
  // Send welcome photo first
  if (pendingReminders.has(chatId)) {
      const {t3, t15, t24 } = pendingReminders.get(chatId);
      clearTimeout(t3);
      clearTimeout(t15);
      clearTimeout(t24);
    }
  
    const t15 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà`,
  Markup.inlineKeyboard([
    Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
  ])
    );
  },15 * 60 * 1000);

  const t3 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! üèÉ‚Äç‚ôÄÔ∏è –ú–µ—Å—Ç–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è ‚Äî —É—Å–ø–µ–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë!`,
      Markup.inlineKeyboard([
    Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
  ])
    );
  }, 3 * 60 * 60 * 1000);

  const t24 = setTimeout(() => {
      bot.telegram.sendMessage(
        chatId, 
        `${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà`,
        Markup.inlineKeyboard([
    Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
  ])
      );
    }, 24 * 60 * 60 * 1000);

  pendingReminders.set(chatId, {t3, t15, t24 });

  await ctx.replyWithPhoto({ source: WELCOME_PHOTO });
  
  
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –Ω–∞—à –±—É–¥—É—â–∏–π –∫–ª–∏–µ–Ω—Ç!\n` +
    `–Ø –õ–µ—è ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–∏–∏ –±–∞–ª–µ—Ç–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∏ LEVITA!\n\n` +
    `–ú–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏ "${firstName}", –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–Ω–æ —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ?`,
    Markup.keyboard([['–î–∞', '–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è']])
      .resize()
      .oneTime()
  );
});

bot.hears('–î–∞', async ctx => {
  await ctx.replyWithPhoto({ source: NEXT_PHOTO });
  
  return ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ])
    .resize()
  );
});

bot.hears('üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', ctx => {
  ctx.reply(
    '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É:',
    Markup.inlineKeyboard([
      Markup.button.webApp('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ', WEBAPP_URL)
    ])
  );
});

bot.hears('üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', ctx => {
  return ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∏ –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.',
    Markup.keyboard([
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', {text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true}]
    ])
    .resize()
  );
});

bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ctx => {
  return ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ])
    .resize()
  );
});

bot.hears('–ö–æ–Ω—Ç–∞–∫—Ç—ã', ctx => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
    –°–≤–æ–±–æ–¥—ã 6 ‚Äî 8-928-00-00-000
    –í–∏–¥–æ–≤–∞ 210–î ‚Äî 8-928-00-00-000
    –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî 8-928-00-00-000`
  );
});

bot.hears('–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è', async ctx => {
  awaitingCustomName.add(ctx.chat.id);
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:');
});

bot.on('text', async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  await addUser(ctx.from.id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
  const text = ctx.message.text;
  const botUsername = ctx.botInfo.username;
  
  if (text.startsWith(`/update_schedule@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ update_schedule —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω');
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    console.log('‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ');
    awaitingScheduleUpload.add(ctx.chat.id);
    return ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  }
  
  if (text.startsWith(`/cancel_schedule@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ cancel_schedule —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    if (awaitingScheduleUpload.has(ctx.chat.id)) {
      awaitingScheduleUpload.delete(ctx.chat.id);
      ctx.reply('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    } else {
      ctx.reply('‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    }
    return;
  }
  
  if (text.startsWith(`/broadcast@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ broadcast —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);

    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    // –í—ã–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã
    const commandPrefix = `/broadcast@${botUsername}`;
    // –û–±—Ä–µ–∑–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    const broadcastMessage = text.startsWith(commandPrefix)
      ? text.slice(commandPrefix.length).trim()
      : text;

    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!broadcastMessage) {
      return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.');
    }

    if (awaitingBroadcast.has(ctx.chat.id)) {
      // –ï—Å–ª–∏ —É–∂–µ –æ–∂–∏–¥–∞–ª–∏ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
      awaitingBroadcast.delete(ctx.chat.id);
    } else {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
      awaitingBroadcast.add(ctx.chat.id);
      
      await ctx.reply('üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');

      let successCount = 0;
      let errorCount = 0;

      for (const userId of botUsers) {
        try {
          await bot.telegram.sendMessage(userId, broadcastMessage);
          successCount++;
          // –ù–µ —Å–ø–∞–º–∏–º API
          await new Promise(resolve => setTimeout(resolve, 50));
        } catch (error) {
          errorCount++;
          console.error(`Failed to send message to user ${userId}:`, error.message);

          if (error.message.includes('blocked') ||
              error.message.includes('user not found') ||
              error.message.includes('chat not found')) {
            botUsers.delete(userId);
          }
        }
      }

      await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–£—Å–ø–µ—à–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${errorCount}`);
    return;
  }}

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏
  if (awaitingCustomName.has(ctx.chat.id)) {
    const customName = ctx.message.text;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è
    userNames.set(ctx.chat.id, customName);
    awaitingCustomName.delete(ctx.chat.id);
    
    await ctx.replyWithPhoto({ source: NEXT_PHOTO });
    await ctx.reply(
      `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${customName}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      Markup.keyboard([
        ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
        ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ])
      .resize()
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
  if (awaitingBroadcast.has(ctx.chat.id)) {
    if (!(await isAdminUser(ctx))) {
      awaitingBroadcast.delete(ctx.chat.id);
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    const broadcastMessage = text;
    awaitingBroadcast.delete(ctx.chat.id);
    
    await ctx.reply('üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const userId of botUsers) {
      try {
        await bot.telegram.sendMessage(userId, broadcastMessage);
        successCount++;
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (error) {
        errorCount++;
        console.error(`Failed to send message to user ${userId}:`, error.message);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        if (error.message.includes('blocked') || error.message.includes('user not found') || error.message.includes('chat not found')) {
          botUsers.delete(userId);
        }
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await saveUsersToFile();
    
    await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botUsers.size}`);
    return;
  }
});

bot.command('contacts', ctx => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
  –°–≤–æ–±–æ–¥—ã 6 ‚Äî 8-928-00-00-000
  –í–∏–¥–æ–≤–∞ 210–î ‚Äî 8-928-00-00-000
  –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî 8-928-00-00-000`
  );
});

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ update_schedule
bot.command('update_schedule', async (ctx) => {
  console.log('üìù –ö–æ–º–∞–Ω–¥–∞ update_schedule –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id, 'ADMIN_CHAT_ID:', ADMIN_CHAT_ID);
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞ - –¥–µ–ª–∞–µ–º –µ—ë –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
  if (!(await isAdminUser(ctx))) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω');
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  console.log('‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ');
  awaitingScheduleUpload.add(ctx.chat.id);
  ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
bot.command('cancel_schedule', async (ctx) => {
  console.log('üìù –ö–æ–º–∞–Ω–¥–∞ cancel_schedule –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
  
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  if (awaitingScheduleUpload.has(ctx.chat.id)) {
    awaitingScheduleUpload.delete(ctx.chat.id);
    ctx.reply('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
  } else {
    ctx.reply('‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.command('users_count', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  ctx.reply(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: ${botUsers.size}`);
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏
const awaitingBroadcast = new Set();

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
bot.command('broadcast', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  awaitingBroadcast.add(ctx.chat.id);
  ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
});

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
bot.on('document', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!awaitingScheduleUpload.has(ctx.chat.id)) {
      return; // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if (!(await isAdminUser(ctx))) {
      awaitingScheduleUpload.delete(ctx.chat.id);
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
    awaitingScheduleUpload.delete(ctx.chat.id);

    await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');

    const fileId = ctx.message.document.file_id;
    const fileName = ctx.message.document.file_name;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fileName.endsWith('.xlsx') && !fileName.endsWith('.xls')) {
      return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)');
    }

    const fileLink = await ctx.telegram.getFileLink(fileId);
    const response = await fetch(fileLink.href);
    const buffer = await response.buffer();

    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(sheet);

    if (data.length === 0) {
      return ctx.reply('‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é updateScheduleFromExcel
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
    const tempFilePath = path.join(__dirname, 'temp_schedule.xlsx');
    await fs.writeFile(tempFilePath, buffer);
    
    try {
      const newSchedules = await updateScheduleFromExcel(tempFilePath);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é schedules
      Object.assign(schedules, newSchedules);
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await fs.unlink(tempFilePath);
      
      const totalEntries = Object.values(newSchedules).reduce((sum, arr) => sum + arr.length, 0);
      
      ctx.reply(`‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalEntries}\nüè¢ –°—Ç—É–¥–∏–π: ${Object.keys(newSchedules).length}`);
      
    } catch (updateError) {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        await fs.unlink(tempFilePath);
      } catch {}
      
      throw updateError;
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    awaitingScheduleUpload.delete(ctx.chat.id);
    
    ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`);
  }
});

bot.on('contact', async ctx => {
  const chatId = ctx.chat.id;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  await addUser(ctx.from.id);
  
  // Clear reminders if exist
  if (pendingReminders.has(chatId)) {
    const {t3, t15, t24 } = pendingReminders.get(chatId);
    clearTimeout(t3);
    clearTimeout(t15);
    clearTimeout(t24);
    pendingReminders.delete(chatId);
  }

  const { first_name, phone_number } = ctx.message.contact;
  const telegram_id = ctx.from.id;
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const userName = userNames.get(chatId) || first_name;
  
  // –î–æ–±–∞–≤–ª—è–µ–º + –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const formattedPhone = phone_number.startsWith('+') ? phone_number : `+${phone_number}`;
  
  // Get stored booking data
  const bookingData = pendingBookings.get(telegram_id);
  
  if (bookingData) {
    // This is a form submission - send complete booking data
    const msg = `–ù–æ–≤–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞:
      –¶–µ–ª—å: ${bookingData.goal}
      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${bookingData.direction}
      –°—Ç—É–¥–∏—è: ${bookingData.address}
      –°–ª–æ—Ç: ${bookingData.slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
      –ò–º—è: ${userName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
      ID: ${telegram_id}`;
      
    await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
    pendingBookings.delete(telegram_id);
  } else {
    // This is a callback request
    const msg = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫:
      –ò–º—è: ${userName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
      ID: ${telegram_id}`;
      
    await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
  }
  
  await ctx.reply('–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', Markup.removeKeyboard());
});

// Add temporary storage for bookings
const pendingBookings = new Map();

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.hears(/.*/, async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  await addUser(ctx.from.id);
});

bot.on('callback_query', async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
  await addUser(ctx.from.id);
});

// Express App
const app = express();
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Endpoints
app.post('/slots', (req, res) => {
  const { direction, address } = req.body;
  const today = new Date();
  console.log('REQUEST direction:', direction, '| address:', address);
  const arr = schedules[address] || [];
  console.log('SLOTS directions:', arr.map(s => '[' + s.direction + ']'));
  const slots = arr
    .filter(slot => {
      const d = new Date(slot.date);
      const diff = (d - today) / (1000 * 60 * 60 * 24);
      const match = slot.direction.trim() === direction.trim();
      if (match && diff >= 0 && diff < 3) {
        console.log('MATCH:', slot.direction, '|', direction, '|', slot.date, slot.time);
      }
      return match && diff >= 0 && diff < 3;
    })
    .map(slot => ({ date: slot.date, time: slot.time }));
  res.json({ ok: true, slots });
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/user-name/:telegram_id', (req, res) => {
  const telegramId = parseInt(req.params.telegram_id);
  const userName = Array.from(userNames.entries())
    .find(([chatId, name]) => chatId === telegramId)?.[1];
  
  res.json({ 
    ok: true, 
    name: userName || null 
  });
});

app.get('/json', async (_req, res) => {
  try {
    const filePath = path.join(__dirname, 'public', 'data', 'schedules.json');
    const data = await fs.readFile(filePath, 'utf8');
    res.json(JSON.parse(data));
  } catch (err) {
    res.status(500).send('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞');
  }
});

app.post('/submit', async (req, res) => {
  try {
    const bookingData = req.body;
    // Store booking data
    pendingBookings.set(bookingData.telegram_id, bookingData);
    
    await bot.telegram.sendMessage(
      bookingData.telegram_id,
      '–°–ø–∞—Å–∏–±–æ! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.',
      {
        reply_markup: {
          keyboard: [[{ text: 'üì≤ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', request_contact: true }]],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      }
    );
    
    res.json({ ok: true });
  } catch (err) {
    console.error('Error in /submit:', err);
    res.status(500).json({ ok: false, error: err.message });
  }
});

async function sendBookingToAdmin(bookingData) {
  const { goal, direction, address, name, phone, slot, telegram_id } = bookingData;
  
  const msg = `–ù–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫–∞:
    –¶–µ–ª—å: ${goal}
    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}
    –°—Ç—É–¥–∏—è: ${address}
    –°–ª–æ—Ç: ${slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
    –ò–º—è: ${name}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
    ID: ${telegram_id}`;
    
  return await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
}

// Telegram webhook callback
app.use(bot.webhookCallback(WEBHOOK_PATH));

// At app startup
console.log('üöÄ Bot starting up...');
console.log('Environment:', {
  PORT,
  WEBHOOK_PATH,
  WEBAPP_URL
});

// For webhook setup
app.listen(PORT, async () => {
  console.log(`üåê Server starting on port ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    console.log('üîÑ Old webhook deleted');
    await bot.telegram.setWebhook(`${WEBAPP_URL}${WEBHOOK_PATH}`);
    console.log('‚úÖ New webhook set successfully');
  } catch (e) {
    console.log('‚ùå Webhook error:', e);
  }
});

// Graceful shutdown
process.once('SIGINT', () => {
  if (bot.isRunning) {
    bot.stop('SIGINT')
  }
});

process.once('SIGTERM', () => {
  if (bot.isRunning) {
    bot.stop('SIGTERM')
  }
})
