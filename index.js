import fs from 'fs'
import express from 'express'
import path, { dirname, resolve } from 'path'
import { fileURLToPath } from 'url'
import { Telegraf, Markup } from 'telegraf'
import XLSX from 'xlsx'
import fetch from 'node-fetch'
import dotenv from 'dotenv'
import pg from 'pg';
const { Pool } = pg;

dotenv.config();

console.log('üöÄ Bot starting up...');
console.log('Environment check:', {
  PORT: process.env.PORT,
  WEBAPP_URL: process.env.WEBAPP_URL,
  DATABASE_URL: process.env.DATABASE_URL ? 'SET' : 'NOT SET',
  POSTGRES_HOST: process.env.POSTGRES_HOST,
  POSTGRES_DB: process.env.POSTGRES_DB,
  BOT_TOKEN: process.env.BOT_TOKEN ? 'SET' : 'NOT SET',
  ADMIN_CHAT_ID: process.env.ADMIN_CHAT_ID ? 'SET' : 'NOT SET'
});

const __filename = fileURLToPath(import.meta.url)
const __dirname  = dirname(__filename)

// Initialize Express app - ADD THIS SECTION
const app = express();
app.use(express.json());
app.use(express.static('public'));

// –î–æ–±–∞–≤—å—Ç–µ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üì® ${req.method} ${req.path} from ${req.ip}`);
  next();
});

const WELCOME_PHOTO = path.join(__dirname, 'public', 'assets', 'welcome.jpg');
const NEXT_PHOTO = path.join(__dirname, 'public', 'assets', 'next.jpg');

// Load config from .env
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const WEBAPP_URL = process.env.WEBAPP_URL;
const WEBHOOK_PATH = '/tg-webhook';

const HOST = process.env.HOST || '0.0.0.0';  // –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
// –æ–±—ä—è–≤–ª—è–µ–º pool –∑–∞—Ä–∞–Ω–µ–µ
let pool


let schedules = {}; // –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

const awaitingScheduleUpload = new Set();
const awaitingCustomName = new Set();
const awaitingBroadcast = new Set();
const pendingReminders = new Map();
const pendingBookings = new Map();

// In-memory storage as fallback
const users = new Map();
const userNames = new Map();

if (!BOT_TOKEN || !ADMIN_CHAT_ID || !WEBAPP_URL) {
  console.error('‚ùå Missing BOT_TOKEN, ADMIN_CHAT_ID or WEBAPP_URL');
  process.exit(1);
}

// Database functions with fallback to memory
async function initDatabase() {
  try {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Amvera PostgreSQL
    const config = process.env.DATABASE_URL ? {
      connectionString: process.env.DATABASE_URL,
      ssl: false // Amvera –Ω–µ —Ç—Ä–µ–±—É–µ—Ç SSL –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    } : {
      host: process.env.POSTGRES_HOST || 'amvera-framezilla-cnpg-bd-bota-rw',
      port: process.env.POSTGRES_PORT || 5432,
      database: process.env.POSTGRES_DB || 'postgres',
      user: process.env.POSTGRES_USER,
      password: process.env.POSTGRES_PASSWORD,
      ssl: false,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      max: 20, // –º–∞–∫—Å–∏–º—É–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—É–ª–µ
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000,
    };

    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...', {
      host: config.host || 'from DATABASE_URL',
      database: config.database || 'from DATABASE_URL',
      user: config.user || 'from DATABASE_URL'
    });

    pool = new Pool(config);
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as current_time');
    console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ, –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:', result.rows[0].current_time);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    try {
      await client.query('SELECT current_user, current_database(), current_schema()');
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (permError) {
      console.log('‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:', permError.message);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try {
      await client.query(`
        CREATE TABLE IF NOT EXISTS bot_users (
          id SERIAL PRIMARY KEY,
          user_id BIGINT UNIQUE NOT NULL,
          first_name VARCHAR(255),
          username VARCHAR(255),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);

      await client.query(`
        CREATE TABLE IF NOT EXISTS user_names (
          id SERIAL PRIMARY KEY,
          chat_id BIGINT UNIQUE NOT NULL,
          custom_name VARCHAR(255) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);

      await client.query(`
        CREATE TABLE IF NOT EXISTS schedules (
          id SERIAL PRIMARY KEY,
          address VARCHAR(500) NOT NULL,
          schedule_data JSONB NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);

      // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
      await client.query(`
        CREATE INDEX IF NOT EXISTS idx_bot_users_user_id ON bot_users(user_id);
        CREATE INDEX IF NOT EXISTS idx_user_names_chat_id ON user_names(chat_id);
        CREATE INDEX IF NOT EXISTS idx_schedules_address ON schedules(address);
      `);

      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã PostgreSQL —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      const loadedSchedules = await loadSchedules();
      if (Object.keys(loadedSchedules).length > 0) {
        schedules = loadedSchedules;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ –ë–î: ${Object.keys(loadedSchedules).length} —Å—Ç—É–¥–∏–π`);
      }
      
    } catch (tableError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', tableError.message);
      console.log('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞–º—è—Ç—å –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏');
      client.release();
      pool = null;
      return;
    }

    client.release();
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.message);
    console.log('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞–º—è—Ç—å');
    pool = null;
  }
}



async function addUser(userId, firstName, username) {
  if (pool) {
    try {
      await pool.query(
        `INSERT INTO bot_users (user_id, first_name, username, updated_at) 
         VALUES ($1, $2, $3, CURRENT_TIMESTAMP) 
         ON CONFLICT (user_id) 
         DO UPDATE SET 
           first_name = EXCLUDED.first_name, 
           username = EXCLUDED.username, 
           updated_at = CURRENT_TIMESTAMP`,
        [userId, firstName || '', username || '']
      );
      console.log(`üë§ User added/updated in DB: ${userId}`);
      return;
    } catch (err) {
      console.error('‚ùå Failed to add user to DB:', err);
    }
  }
  
  // Fallback to memory
  users.set(userId, { firstName, username, addedAt: new Date() });
  console.log(`üë§ User added/updated in memory: ${userId}`);
}

async function getUsersCount() {
  if (pool) {
    try {
      const result = await pool.query('SELECT COUNT(*) as count FROM bot_users');
      return parseInt(result.rows[0].count);
    } catch (err) {
      console.error('‚ùå Failed to get users count from DB:', err);
    }
  }
  
  return users.size;
}

async function getAllUsers() {
  if (pool) {
    try {
      const result = await pool.query('SELECT user_id FROM bot_users');
      return result.rows.map(row => row.user_id);
    } catch (err) {
      console.error('‚ùå Failed to get all users from DB:', err);
    }
  }
  
  return Array.from(users.keys());
}

async function removeUser(userId) {
  if (pool) {
    try {
      await pool.query('DELETE FROM bot_users WHERE user_id = $1', [userId]);
      console.log(`üë§ User removed from DB: ${userId}`);
      return;
    } catch (err) {
      console.error('‚ùå Failed to remove user from DB:', err);
    }
  }
  
  users.delete(userId);
  userNames.delete(userId);
  console.log(`üë§ User removed from memory: ${userId}`);
}

async function setUserName(chatId, name) {
  if (pool) {
    try {
      await pool.query(
        `INSERT INTO user_names (chat_id, custom_name, updated_at) 
         VALUES ($1, $2, CURRENT_TIMESTAMP) 
         ON CONFLICT (chat_id) 
         DO UPDATE SET 
           custom_name = EXCLUDED.custom_name, 
           updated_at = CURRENT_TIMESTAMP`,
        [chatId, name]
      );
      return;
    } catch (err) {
      console.error('‚ùå Failed to set user name in DB:', err);
    }
  }
  
  userNames.set(chatId, name);
}

async function getUserName(chatId) {
  if (pool) {
    try {
      const result = await pool.query('SELECT custom_name FROM user_names WHERE chat_id = $1', [chatId]);
      return result.rows[0]?.custom_name || null;
    } catch (err) {
      console.error('‚ùå Failed to get user name from DB:', err);
    }
  }
  
  return userNames.get(chatId) || null;
}

async function saveSchedules(schedulesData) {
  if (pool) {
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const client = await pool.connect();
      
      try {
        await client.query('BEGIN');
        await client.query('DELETE FROM schedules');
        
        for (const [address, scheduleArray] of Object.entries(schedulesData)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scheduleArray —ç—Ç–æ –º–∞—Å—Å–∏–≤
          if (!Array.isArray(scheduleArray)) {
            console.error(`‚ùå Invalid schedule data for ${address}: not an array`);
            continue;
          }
          
          // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
          const jsonString = JSON.stringify(scheduleArray);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
          JSON.parse(jsonString); // –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
          
          await client.query(
            'INSERT INTO schedules (address, schedule_data, updated_at) VALUES ($1, $2, CURRENT_TIMESTAMP)',
            [address, jsonString]
          );
          
          console.log(`‚úÖ Saved schedule for ${address}: ${scheduleArray.length} slots`);
        }
        
        await client.query('COMMIT');
        console.log('‚úÖ Schedules saved to PostgreSQL database');
        return;
      } catch (err) {
        await client.query('ROLLBACK');
        throw err;
      } finally {
        client.release();
      }
    } catch (err) {
      console.error('‚ùå Failed to save schedules to DB:', err);
    }
  }
  
  schedules = schedulesData;
  console.log('‚úÖ Schedules saved to memory');
}

// –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é loadSchedules –Ω–∞ —ç—Ç—É —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:
async function loadSchedules() {
  if (pool) {
    try {
      const result = await pool.query('SELECT id, address, schedule_data FROM schedules');
      const loadedSchedules = {};
      let corruptedRows = 0;
      
      for (const row of result.rows) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ schedule_data —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
          let scheduleData = row.schedule_data;
          
          if (typeof scheduleData === 'string') {
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º JSON
            loadedSchedules[row.address] = JSON.parse(scheduleData);
          } else if (typeof scheduleData === 'object' && scheduleData !== null) {
            // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            loadedSchedules[row.address] = scheduleData;
          } else {
            console.log(`‚ö†Ô∏è Invalid schedule_data type for address ${row.address}:`, typeof scheduleData);
            corruptedRows++;
            continue;
          }
          
          console.log(`‚úÖ Loaded schedule for ${row.address}: ${loadedSchedules[row.address].length} slots`);
          
        } catch (parseError) {
          console.error(`‚ùå Failed to parse schedule for address ${row.address}:`, parseError.message);
          console.log(`Raw data:`, row.schedule_data);
          corruptedRows++;
          
          // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
          try {
            await pool.query('DELETE FROM schedules WHERE id = $1', [row.id]);
            console.log(`üóëÔ∏è Deleted corrupted schedule record for ${row.address}`);
          } catch (deleteError) {
            console.error(`‚ùå Failed to delete corrupted record:`, deleteError.message);
          }
        }
      }
      
      if (corruptedRows > 0) {
        console.log(`‚ö†Ô∏è Found and cleaned ${corruptedRows} corrupted schedule records`);
      }
      
      console.log(`‚úÖ Loaded schedules for ${Object.keys(loadedSchedules).length} addresses from DB`);
      return loadedSchedules;
      
    } catch (err) {
      console.error('‚ùå Failed to load schedules from DB:', err);
    }
  }
  
  return {};
}


// Initialize database
await initDatabase();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
async function isAdminUser(ctx) {
  return ctx.chat.id.toString() === ADMIN_CHAT_ID;
}

// Initialize bot
const bot = new Telegraf(BOT_TOKEN);

// Add error handler
bot.catch((err, ctx) => {
  console.error('‚ùå Bot error:', err);
});

// Add debug middleware
bot.use((ctx, next) => {
  console.log('üì® Received:', ctx.updateType, 'from:', ctx.from?.id);
  console.log('Current data:', data);

  return next();
});

// Function to send a message to a user and handle blocked users
async function sendMessageToUser(userId, message) {
  try {
    await bot.telegram.sendMessage(userId, message);
  } catch (error) {
    if (error.code === 403) {
      console.error(`User ${userId} has blocked the bot. Removing from database.`);
      await removeUser(userId);
    } else {
      console.error(`Failed to send message to user ${userId}:`, error.message);
    }
  }
}

// Function to update schedule from buffer
async function updateScheduleFromBuffer(buffer) {
  try {
    console.log('üìä Starting to process Excel buffer...');
    
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(sheet);
    
    console.log('üìä Raw data from Excel:', data.length, 'rows');

    const newSchedules = {};
    let processedRows = 0;
    let errorRows = 0;

    data.forEach((row, index) => {
      try {
        if (!row.date || !row.time || !row.direction || !row.address) {
          console.log(`‚ö†Ô∏è Row ${index + 1} missing required fields`);
          errorRows++;
          return;
        }

        let dateValue = row.date;
        
        if (typeof dateValue === 'number') {
          dateValue = new Date((dateValue - 25569) * 86400 * 1000);
        } else {
          dateValue = new Date(dateValue);
        }
        
        if (isNaN(dateValue.getTime())) {
          console.log(`‚ö†Ô∏è Row ${index + 1} invalid date:`, row.date);
          errorRows++;
          return;
        }
        
        const formattedDate = dateValue.toISOString().split('T')[0];
        const address = row.address.toString().trim();

        if (!newSchedules[address]) {
          newSchedules[address] = [];
        }

        const orderedEntry = {
          date: formattedDate,
          time: row.time.toString().trim(),
          direction: row.direction.toString().trim(),
          address: address
        };

        newSchedules[address].push(orderedEntry);
        processedRows++;
        
      } catch (error) {
        console.error(`‚ùå Error processing row ${index + 1}:`, error);
        errorRows++;
      }
    });

    await saveSchedules(newSchedules);
    schedules = newSchedules;
    
    console.log('‚úÖ Schedules updated successfully');

    return { newSchedules, processedRows, errorRows };
    
  } catch (error) {
    console.error('‚ùå Error in updateScheduleFromBuffer:', error);
    throw error;
  }
}

// Set up menu commands
try {
  const publicCommands = [
    { command: 'start', description: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' },
    { command: 'contacts', description: '–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏' }
  ];
  await bot.telegram.setMyCommands(publicCommands);

  const adminGroupCommands = [
    { command: 'update_schedule', description: '–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' },
    { command: 'cancel_schedule', description: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' },
    { command: 'users_count', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
    { command: 'broadcast', description: '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è' },
    { command: 'check_schedules', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' },
    { command: 'db_status', description: '–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' },
    { command: 'dump_db', description: '–í—ã–≤–µ—Å—Ç–∏ –ë–î –≤ –ª–æ–≥–∏' },
    { command: 'dump_schedules', description: '–í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ª–æ–≥–∏' }
  ];
  await bot.telegram.setMyCommands(adminGroupCommands, {
    scope: { type: 'chat', chat_id: Number(ADMIN_CHAT_ID) }
  });

} catch (err) {
  console.log('Command menu setup error:', err);
}

bot.start(async ctx => {
  const firstName = ctx.from.first_name || '–∫–ª–∏–µ–Ω—Ç';
  const username = ctx.from.username || '';
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  await addUser(userId, firstName, username);
  await setUserName(chatId, firstName);
  
  // Clear existing reminders
  if (pendingReminders.has(chatId)) {
    const {t3, t15, t24 } = pendingReminders.get(chatId);
    clearTimeout(t3);
    clearTimeout(t15);
    clearTimeout(t24);
  }
  
  // Set new reminders
  const t15 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 15 * 60 * 1000);

  const t3 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! üèÉ‚Äç‚ôÄÔ∏è –ú–µ—Å—Ç–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è ‚Äî —É—Å–ø–µ–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë!`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 3 * 60 * 60 * 1000);

  const t24 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId, 
      `${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 24 * 60 * 60 * 1000);

  pendingReminders.set(chatId, {t3, t15, t24 });

  await ctx.replyWithPhoto({ source: WELCOME_PHOTO });
  
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –Ω–∞—à –±—É–¥—É—â–∏–π –∫–ª–∏–µ–Ω—Ç!\n` +
    `–Ø –õ–µ—è ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–∏–∏ –±–∞–ª–µ—Ç–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∏ LEVITA!\n\n` +
    `–ú–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏ "${firstName}", –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–Ω–æ —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ?`,
    Markup.keyboard([['–î–∞', '–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è']])
      .resize()
      .oneTime()
  );
});

bot.hears('–î–∞', async ctx => {
  await ctx.replyWithPhoto({ source: NEXT_PHOTO });
  
  return ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ])
    .resize()
  );
});

bot.hears('üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', ctx => {
  ctx.reply(
    '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É:',
    Markup.inlineKeyboard([
      Markup.button.webApp('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ', WEBAPP_URL)
    ])
  );
});

bot.hears('üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', ctx => {
  return ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∏ –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.',
    Markup.keyboard([
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', {text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true}]
    ])
    .resize()
  );
});

bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ctx => {
  return ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ])
    .resize()
  );
});

bot.hears('–ö–æ–Ω—Ç–∞–∫—Ç—ã', ctx => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
    –°–≤–æ–±–æ–¥—ã 6 ‚Äî +7-928-40-85-968
    –í–∏–¥–æ–≤–∞ 210–î ‚Äî +7-993-32-12-000
    –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî +7-993-30-10-137`
  );
});

bot.hears('–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è', async ctx => {
  awaitingCustomName.add(ctx.chat.id);
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:');
});

bot.on('text', async (ctx) => {
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
  const text = ctx.message.text;
  const botUsername = ctx.botInfo.username;
  
  if (text.startsWith(`/update_schedule@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ update_schedule —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω');
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    console.log('‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ');
    awaitingScheduleUpload.add(ctx.chat.id);
    return ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  }
  
  if (text.startsWith(`/cancel_schedule@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ cancel_schedule —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
   if (text.startsWith(`/dump_db@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ dump_db —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    if (!pool) {
      console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å)');
      return ctx.reply('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å)');
    }
    
    try {
      console.log('üîç ===== DUMP DATABASE START =====');
      
      // 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const client = await pool.connect();
      const dbInfo = await client.query('SELECT current_database(), current_user, current_schema(), version()');
      console.log('üìä Database Info:', dbInfo.rows[0]);
      
      // 2. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
      const tables = await client.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name
      `);
      console.log('üìã Tables:', tables.rows.map(r => r.table_name));
      
      // 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞
      try {
        const users = await client.query('SELECT * FROM bot_users ORDER BY created_at DESC LIMIT 10');
        console.log('üë• Bot Users (last 10):');
        users.rows.forEach((user, index) => {
          console.log(`  ${index + 1}. ID: ${user.user_id}, Name: ${user.first_name}, Username: @${user.username || 'none'}, Created: ${user.created_at}`);
        });
        
        const userCount = await client.query('SELECT COUNT(*) as count FROM bot_users');
        console.log(`üë• Total Users: ${userCount.rows[0].count}`);
      } catch (err) {
        console.log('‚ùå Error reading bot_users:', err.message);
      }
      
      // 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–º–µ–Ω–∞
      try {
        const userNames = await client.query('SELECT * FROM user_names ORDER BY updated_at DESC LIMIT 10');
        console.log('üìù User Names (last 10):');
        userNames.rows.forEach((name, index) => {
          console.log(`  ${index + 1}. Chat ID: ${name.chat_id}, Name: ${name.custom_name}, Updated: ${name.updated_at}`);
        });
        
        const nameCount = await client.query('SELECT COUNT(*) as count FROM user_names');
        console.log(`üìù Total Custom Names: ${nameCount.rows[0].count}`);
      } catch (err) {
        console.log('‚ùå Error reading user_names:', err.message);
      }
      
      // 5. –†–∞—Å–ø–∏—Å–∞–Ω–∏—è
      try {
        const schedules_db = await client.query('SELECT * FROM schedules ORDER BY updated_at DESC');
        console.log('üìÖ Schedules from DB:');
        schedules_db.rows.forEach((schedule, index) => {
          const data = JSON.parse(schedule.schedule_data);
          console.log(`  ${index + 1}. Address: ${schedule.address}`);
          console.log(`     Slots: ${data.length}`);
          console.log(`     Updated: ${schedule.updated_at}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
          if (data.length > 0) {
            console.log('     Sample slots:');
            data.slice(0, 3).forEach((slot, slotIndex) => {
              console.log(`       ${slotIndex + 1}. ${slot.date} ${slot.time} - ${slot.direction}`);
            });
            if (data.length > 3) {
              console.log(`       ... –∏ –µ—â–µ ${data.length - 3} —Å–ª–æ—Ç–æ–≤`);
            }
          }
          console.log('');
        });
        
        const scheduleCount = await client.query('SELECT COUNT(*) as count FROM schedules');
        console.log(`üìÖ Total Schedule Addresses: ${scheduleCount.rows[0].count}`);
      } catch (err) {
        console.log('‚ùå Error reading schedules:', err.message);
      }
      
      client.release();
      
      console.log('üîç ===== DUMP DATABASE END =====');
      
      await ctx.reply('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
      
    } catch (err) {
      console.error('‚ùå Error dumping database:', err);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ë–î: ${err.message}`);
    }
    return;
  }
  
  if (text.startsWith(`/dump_schedules@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ dump_schedules —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    console.log('üìÖ ===== SCHEDULES DUMP START =====');
    console.log('üìä Global schedules variable:');
    console.log(`Addresses count: ${Object.keys(schedules).length}`);
    
    Object.entries(schedules).forEach(([address, slots], index) => {
      console.log(`\n${index + 1}. üè¢ ${address}:`);
      console.log(`   Slots: ${slots.length}`);
      
      if (slots.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        const byDate = {};
        slots.forEach(slot => {
          if (!byDate[slot.date]) byDate[slot.date] = [];
          byDate[slot.date].push(slot);
        });
        
        Object.entries(byDate).forEach(([date, dateSlots]) => {
          console.log(`   üìÖ ${date}: ${dateSlots.length} slots`);
          dateSlots.slice(0, 5).forEach(slot => {
            console.log(`      ${slot.time} - ${slot.direction}`);
          });
          if (dateSlots.length > 5) {
            console.log(`      ... –∏ –µ—â–µ ${dateSlots.length - 5} —Å–ª–æ—Ç–æ–≤`);
          }
        });
      }
    });
    
    console.log('üìÖ ===== SCHEDULES DUMP END =====');
    
    await ctx.reply('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
    return;
  }
  
  if (text.startsWith(`/db_status@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ db_status —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    if (!pool) {
      return ctx.reply('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å)');
    }
    
    try {
      const client = await pool.connect();
      const result = await client.query('SELECT NOW() as time');
      const usersCount = await getUsersCount();
      const schedulesCount = Object.keys(schedules).length;
      
      client.release();
      
      await ctx.reply(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].time}
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}
üìÖ –°—Ç—É–¥–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: ${schedulesCount}
üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: PostgreSQL`);
      
    } catch (err) {
      console.error('DB status error:', err);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ë–î: ${err.message}`);
    }
    return;
  }

// –í —Å–µ–∫—Ü–∏–∏ bot.on('text') –¥–æ–±–∞–≤—å—Ç–µ:
if (text.startsWith(`/clean_db@${botUsername}`)) {
  console.log('üìù –ö–æ–º–∞–Ω–¥–∞ clean_db —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
  
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  if (!pool) {
    return ctx.reply('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  }
  
  try {
    const client = await pool.connect();
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É schedules
    await client.query('DELETE FROM schedules');
    console.log('üóëÔ∏è Cleared schedules table');
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    schedules = {};
    
    client.release();
    
    await ctx.reply('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /update_schedule');
    
  } catch (err) {
    console.error('‚ùå Error cleaning database:', err);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: ${err.message}`);
  }
  return;
}


    if (awaitingScheduleUpload.has(ctx.chat.id)) {
      awaitingScheduleUpload.delete(ctx.chat.id);
      ctx.reply('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    } else {
      ctx.reply('‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    }
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã users_count —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
  if (text.startsWith(`/users_count@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ users_count —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);

    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    try {
      const count = await getUsersCount();
      return ctx.reply(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: ${count}`);
    } catch (err) {
      console.error('‚ùå Failed to get user count:', err);
      return ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã broadcast —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
  if (text.startsWith(`/broadcast@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ broadcast —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    awaitingBroadcast.add(ctx.chat.id);
    return ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏
  if (awaitingCustomName.has(ctx.chat.id)) {
    const customName = ctx.message.text;
    await setUserName(ctx.chat.id, customName);
    awaitingCustomName.delete(ctx.chat.id);
    
    await ctx.replyWithPhoto({ source: NEXT_PHOTO });
    await ctx.reply(
      `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${customName}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      Markup.keyboard([
        ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
        ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ])
      .resize()
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
  if (awaitingBroadcast.has(ctx.chat.id)) {
    if (!(await isAdminUser(ctx))) {
      awaitingBroadcast.delete(ctx.chat.id);
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    const broadcastMessage = text;
    awaitingBroadcast.delete(ctx.chat.id);
    
    await ctx.reply('üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
    
    let successCount = 0;
    let errorCount = 0;
    
    const allUsers = await getAllUsers();
    
    for (const userId of allUsers) {
      try {
        await sendMessageToUser(userId, broadcastMessage);
        successCount++;
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (error) {
        errorCount++;
        console.error(`Failed to send message to user ${userId}:`, error.message);
        
        if (error.message.includes('blocked') || error.message.includes('user not found') || error.message.includes('chat not found')) {
          await removeUser(userId);
        }
      }
    }
    
    const finalCount = await getUsersCount();
    await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalCount}`);
    return;
  }
});

bot.command('contacts', ctx => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
  –°–≤–æ–±–æ–¥—ã 6 ‚Äî +7-928-40-85-968
  –í–∏–¥–æ–≤–∞ 210–î ‚Äî +7-993-32-12-000
  –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî +7-993-30-10-137`
  );
});

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ update_schedule
bot.command('update_schedule', async (ctx) => {
  console.log('üìù –ö–æ–º–∞–Ω–¥–∞ update_schedule –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id, 'ADMIN_CHAT_ID:', ADMIN_CHAT_ID);
  console.log('üîç –¢–∏–ø —á–∞—Ç–∞:', ctx.chat.type);
  
  if (!(await isAdminUser(ctx))) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω');
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  console.log('‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ');
  awaitingScheduleUpload.add(ctx.chat.id);
  console.log('üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö:', Array.from(awaitingScheduleUpload));
  
  await ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫–∏: date, time, direction, address');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
bot.command('cancel_schedule', async (ctx) => {
  console.log('üìù –ö–æ–º–∞–Ω–¥–∞ cancel_schedule –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
  
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  if (awaitingScheduleUpload.has(ctx.chat.id)) {
    awaitingScheduleUpload.delete(ctx.chat.id);
    ctx.reply('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
  } else {
    ctx.reply('‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.command('users_count', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  try {
    const count = await getUsersCount();
    return ctx.reply(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: ${count}`);
  } catch (err) {
    console.error('‚ùå Failed to get users count:', err);
    return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
bot.command('broadcast', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  awaitingBroadcast.add(ctx.chat.id);
  ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
});

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
bot.on('document', async (ctx) => {
  console.log('üìÑ Document received from:', ctx.chat.id);
  console.log('üìã Awaiting upload list:', Array.from(awaitingScheduleUpload));
  
  if (!awaitingScheduleUpload.has(ctx.chat.id)) {
    console.log('‚ùå User not in awaiting list');
    return;
  }
  
  if (!(await isAdminUser(ctx))) {
    console.log('‚ùå User is not admin');
    return;
  }

  awaitingScheduleUpload.delete(ctx.chat.id);
  
  try {
    const fileName = ctx.message.document.file_name;
    console.log('üìÑ Processing file:', fileName);
    
    if (!fileName.endsWith('.xlsx') && !fileName.endsWith('.xls')) {
      return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)');
    }

    await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');

    const fileLink = await ctx.telegram.getFileLink(ctx.message.document.file_id);
    console.log('üîó File link obtained:', fileLink.href);
    
    const response = await fetch(fileLink.href);
    const buffer = await response.buffer();
    console.log('üì¶ Buffer size:', buffer.length, 'bytes');

    const result = await updateScheduleFromBuffer(buffer);
    
    await ctx.reply(`‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.processedRows}\nüè¢ –°—Ç—É–¥–∏–π: ${Object.keys(result.newSchedules).length}\n‚ö†Ô∏è –û—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö: ${result.errorRows}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
    ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

bot.command('check_schedules', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  const addressCount = Object.keys(schedules).length;
  const totalSlots = Object.values(schedules).reduce((sum, arr) => sum + arr.length, 0);
  
  let message = `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:\n`;
  message += `üè¢ –°—Ç—É–¥–∏–π: ${addressCount}\n`;
  message += `üìÖ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${totalSlots}\n\n`;
  
  if (addressCount > 0) {
    message += `–°—Ç—É–¥–∏–∏:\n`;
    Object.keys(schedules).forEach(address => {
      message += `‚Ä¢ ${address}: ${schedules[address].length} —Å–ª–æ—Ç–æ–≤\n`;
    });
  } else {
    message += `‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`;
  }
  
  await ctx.reply(message);
});

bot.on('contact', async ctx => {
  const chatId = ctx.chat.id;
  
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
  
  // Clear reminders if exist
  if (pendingReminders.has(chatId)) {
    const {t3, t15, t24 } = pendingReminders.get(chatId);
    clearTimeout(t3);
    clearTimeout(t15);
    clearTimeout(t24);
    pendingReminders.delete(chatId);
  }

  const { first_name, phone_number } = ctx.message.contact;
  const telegram_id = ctx.from.id;
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const userName = await getUserName(chatId) || first_name;
  
  // –î–æ–±–∞–≤–ª—è–µ–º + –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const formattedPhone = phone_number.startsWith('+') ? phone_number : `+${phone_number}`;
  
  // Get stored booking data
  const bookingData = pendingBookings.get(telegram_id);
  
  if (bookingData) {
    // This is a form submission - send complete booking data
    const msg = `–ù–æ–≤–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞:
      –¶–µ–ª—å: ${bookingData.goal}
      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${bookingData.direction}
      –°—Ç—É–¥–∏—è: ${bookingData.address}
      –°–ª–æ—Ç: ${bookingData.slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
      –ò–º—è: ${userName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
      ID: ${telegram_id}`;
      
    await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
    pendingBookings.delete(telegram_id);
  } else {
    // This is a callback request
    const msg = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫:
      –ò–º—è: ${userName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
      ID: ${telegram_id}`;
      
    await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
  }
  
  await ctx.reply('–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', Markup.removeKeyboard());
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.hears(/.*/, async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
});

bot.on('callback_query', async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
});


// Endpoints
app.post('/slots', (req, res) => {
  const { direction, address, days = 3 } = req.body;
  const now = new Date();
  const targetDate = new Date();
  targetDate.setDate(targetDate.getDate() + days);

  const arr = schedules[address] || [];

  const slots = arr
    .filter(slot => {
      const slotDateTime = new Date(`${slot.date}T${slot.time}`);
      const match = slot.direction.trim() === direction.trim();
      
      return match && !isNaN(slotDateTime.getTime()) && slotDateTime >= now && slotDateTime <= targetDate;
    })
    .map(slot => ({ date: slot.date, time: slot.time }))
    .sort((a, b) => {
      const dateA = new Date(`${a.date}T${a.time}`);
      const dateB = new Date(`${b.date}T${b.time}`);
      return dateA - dateB;
    });

  res.json({ ok: true, slots });
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/user-name/:telegram_id', async (req, res) => {
  const telegramId = parseInt(req.params.telegram_id);
  const userName = await getUserName(telegramId);
  
  res.json({ 
    ok: true, 
    name: userName 
  });
});

app.post('/submit', async (req, res) => {
  try {
    const bookingData = req.body;
    // Store booking data
    pendingBookings.set(bookingData.telegram_id, bookingData);
    
    await bot.telegram.sendMessage(
      bookingData.telegram_id,
      '–°–ø–∞—Å–∏–±–æ! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.',
      {
        reply_markup: {
          keyboard: [[{ text: 'üì≤ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', request_contact: true }]],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      }
    );
    
    res.json({ ok: true });
  } catch (err) {
    console.error('Error in /submit:', err);
    res.status(500).json({ ok: false, error: err.message });
  }
});

async function sendBookingToAdmin(bookingData) {
  const { goal, direction, address, name, phone, slot, telegram_id } = bookingData;
  
  const msg = `–ù–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫–∞:
    –¶–µ–ª—å: ${goal}
    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}
    –°—Ç—É–¥–∏—è: ${address}
    –°–ª–æ—Ç: ${slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
    –ò–º—è: ${name}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
    ID: ${telegram_id}`;
    
  return await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
}

const isProd = process.env.NODE_ENV === 'production';
const PORT = process.env.PORT || process.env.SERVER_PORT || process.env.AMVERA_PORT || 80;

console.log(`üîß –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: ${isProd ? 'PRODUCTION (webhook)' : 'DEVELOPMENT (polling)'}`);
console.log(`üîå –ü–æ—Ä—Ç: ${PORT}`);
console.log(`üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç–æ–≤:`, {
  PORT: process.env.PORT,
  SERVER_PORT: process.env.SERVER_PORT,
  AMVERA_PORT: process.env.AMVERA_PORT,
  –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: PORT
});

// –î–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.send('<h1>Server Works!</h1><p>Bot is running</p>');
});

app.get('/test', (req, res) => {
  res.json({ 
    status: 'ok', 
    time: new Date(),
    port: PORT,
    env: process.env.NODE_ENV 
  });
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy' });
});

let botRunning = false;

// –°–ù–ê–ß–ê–õ–ê –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = app.listen(PORT, '0.0.0.0', async () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}`);
  
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
  setTimeout(async () => {
    console.log('ü§ñ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    
    try {
      if (isProd) {
        // PRODUCTION: webhook
        console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...');
        console.log('üîó –ü–æ–ª–Ω—ã–π URL webhook:', `${WEBAPP_URL}${WEBHOOK_PATH}`);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –∏ pending updates
        await bot.telegram.deleteWebhook({ drop_pending_updates: true });
        console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω, pending updates –æ—á–∏—â–µ–Ω—ã');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        const webhookResult = await bot.telegram.setWebhook(`${WEBAPP_URL}${WEBHOOK_PATH}`);
        console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookResult);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
        app.post(WEBHOOK_PATH, express.json(), (req, res) => {
          console.log('üì® Webhook –ø–æ–ª—É—á–µ–Ω:', {
            timestamp: new Date().toISOString(),
            updateId: req.body.update_id,
            hasMessage: !!req.body.message,
            messageText: req.body.message?.text?.substring(0, 50)
          });
          
          try {
            bot.handleUpdate(req.body);
            res.status(200).send('OK');
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
            res.status(500).send('Error');
          }
        });
        
        console.log(`‚úÖ Webhook callback –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ ${WEBHOOK_PATH}`);
        botRunning = false;
        
      } else {
        // DEVELOPMENT: polling
        console.log('üîÑ –ó–∞–ø—É—Å–∫ polling...');
        await bot.launch();
        botRunning = true;
        console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
      const webhookInfo = await bot.telegram.getWebhookInfo();
      console.log('üìä Webhook —Å—Ç–∞—Ç—É—Å:', {
        url: webhookInfo.url,
        pending_updates: webhookInfo.pending_update_count,
        last_error: webhookInfo.last_error_message || 'none'
      });
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', err.message);
      console.error('Stack:', err.stack);
    }
  }, 3000);
});

server.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  if (err.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
  }
});

// graceful shutdown
const shutdown = (signal) => {
  console.log(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
  server.close(async () => {
    if (botRunning) {
      try {
        await bot.stop(signal);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', err);
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if (pool) {
      try {
        await pool.end();
        console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è PostgreSQL:', err);
      }
    }
    
    process.exit(0);
  });
};

process.once('SIGINT', () => shutdown('SIGINT'));
process.once('SIGTERM', () => shutdown('SIGTERM'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (err) => {
  console.error('‚ùå Uncaught Exception:', err);
  process.exit(1);
});

// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∞–¥–º–∏–Ω—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É:
bot.command('db_status', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  if (!pool) {
    return ctx.reply('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å)');
  }
  
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as time');
    const usersCount = await getUsersCount();
    const schedulesCount = Object.keys(schedules).length;
    
    client.release();
    
    await ctx.reply(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].time}
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}
üìÖ –°—Ç—É–¥–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: ${schedulesCount}
üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: PostgreSQL`);
    
  } catch (err) {
    console.error('DB status error:', err);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ë–î: ${err.message}`);
  }
});

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
bot.command('dump_db', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  if (!pool) {
    console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å)');
    return ctx.reply('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å)');
  }
  
  try {
    console.log('üîç ===== DUMP DATABASE START =====');
    
    // 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const client = await pool.connect();
    const dbInfo = await client.query('SELECT current_database(), current_user, current_schema(), version()');
    console.log('üìä Database Info:', dbInfo.rows[0]);
    
    // 2. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    console.log('üìã Tables:', tables.rows.map(r => r.table_name));
    
    // 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞
    try {
      const users = await client.query('SELECT * FROM bot_users ORDER BY created_at DESC LIMIT 10');
      console.log('üë• Bot Users (last 10):');
      users.rows.forEach((user, index) => {
        console.log(`  ${index + 1}. ID: ${user.user_id}, Name: ${user.first_name}, Username: @${user.username || 'none'}, Created: ${user.created_at}`);
      });
      
      const userCount = await client.query('SELECT COUNT(*) as count FROM bot_users');
      console.log(`üë• Total Users: ${userCount.rows[0].count}`);
    } catch (err) {
      console.log('‚ùå Error reading bot_users:', err.message);
    }
    
    // 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–º–µ–Ω–∞
    try {
      const userNames = await client.query('SELECT * FROM user_names ORDER BY updated_at DESC LIMIT 10');
      console.log('üìù User Names (last 10):');
      userNames.rows.forEach((name, index) => {
        console.log(`  ${index + 1}. Chat ID: ${name.chat_id}, Name: ${name.custom_name}, Updated: ${name.updated_at}`);
      });
      
      const nameCount = await client.query('SELECT COUNT(*) as count FROM user_names');
      console.log(`üìù Total Custom Names: ${nameCount.rows[0].count}`);
    } catch (err) {
      console.log('‚ùå Error reading user_names:', err.message);
    }
    
    // 5. –†–∞—Å–ø–∏—Å–∞–Ω–∏—è
    try {
      const schedules = await client.query('SELECT * FROM schedules ORDER BY updated_at DESC');
      console.log('üìÖ Schedules:');
      schedules.rows.forEach((schedule, index) => {
        const data = JSON.parse(schedule.schedule_data);
        console.log(`  ${index + 1}. Address: ${schedule.address}`);
        console.log(`     Slots: ${data.length}`);
        console.log(`     Updated: ${schedule.updated_at}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        if (data.length > 0) {
          console.log('     Sample slots:');
          data.slice(0, 3).forEach((slot, slotIndex) => {
            console.log(`       ${slotIndex + 1}. ${slot.date} ${slot.time} - ${slot.direction}`);
          });
          if (data.length > 3) {
            console.log(`       ... –∏ –µ—â–µ ${data.length - 3} —Å–ª–æ—Ç–æ–≤`);
          }
        }
        console.log('');
      });
      
      const scheduleCount = await client.query('SELECT COUNT(*) as count FROM schedules');
      console.log(`üìÖ Total Schedule Addresses: ${scheduleCount.rows[0].count}`);
    } catch (err) {
      console.log('‚ùå Error reading schedules:', err.message);
    }
    
    // 6. –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
    try {
      const tableSizes = await client.query(`
        SELECT 
          schemaname,
          tablename,
          attname,
          n_distinct,
          correlation
        FROM pg_stats 
        WHERE schemaname = 'public'
        ORDER BY tablename, attname
      `);
      
      console.log('üìä Table Statistics:');
      let currentTable = '';
      tableSizes.rows.forEach(stat => {
        if (stat.tablename !== currentTable) {
          currentTable = stat.tablename;
          console.log(`  üìã ${stat.tablename}:`);
        }
        console.log(`    - ${stat.attname}: distinct=${stat.n_distinct}, correlation=${stat.correlation}`);
      });
    } catch (err) {
      console.log('‚ùå Error reading table stats:', err.message);
    }
    
    client.release();
    
    console.log('üîç ===== DUMP DATABASE END =====');
    
    await ctx.reply('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
    
  } catch (err) {
    console.error('‚ùå Error dumping database:', err);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ë–î: ${err.message}`);
  }
});

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
bot.command('dump_schedules', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  console.log('üìÖ ===== SCHEDULES DUMP START =====');
  console.log('üìä Global schedules variable:');
  console.log(`Addresses count: ${Object.keys(schedules).length}`);
  
  Object.entries(schedules).forEach(([address, slots], index) => {
    console.log(`\n${index + 1}. üè¢ ${address}:`);
    console.log(`   Slots: ${slots.length}`);
    
    if (slots.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
      const byDate = {};
      slots.forEach(slot => {
        if (!byDate[slot.date]) byDate[slot.date] = [];
        byDate[slot.date].push(slot);
      });
      
      Object.entries(byDate).forEach(([date, dateSlots]) => {
        console.log(`   üìÖ ${date}: ${dateSlots.length} slots`);
        dateSlots.slice(0, 5).forEach(slot => {
          console.log(`      ${slot.time} - ${slot.direction}`);
        });
        if (dateSlots.length > 5) {
          console.log(`      ... –∏ –µ—â–µ ${dateSlots.length - 5} —Å–ª–æ—Ç–æ–≤`);
        }
      });
    }
  });
  
  console.log('üìÖ ===== SCHEDULES DUMP END =====');
  
  await ctx.reply('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
});
