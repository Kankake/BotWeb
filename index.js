// –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint /slots –Ω–∞ —ç—Ç–æ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫:
app.post('/slots', (req, res) => {
  try {
    console.log('üîç /slots request received:', {
      body: req.body,
      timestamp: new Date().toISOString()
    });
    
    const { direction, address, days = 3 } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!direction || !address) {
      console.log('‚ùå Missing required parameters');
      return res.status(400).json({ 
        ok: false, 
        error: 'Missing required parameters: direction and address' 
      });
    }
    
    console.log('üìä Request parameters:', {
      direction: direction,
      address: address,
      days: days
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–æ–æ–±—â–µ
    console.log('üìÖ Available schedules:', {
      totalAddresses: Object.keys(schedules).length,
      addresses: Object.keys(schedules)
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å
    const arr = schedules[address] || [];
    console.log(`üìç Schedule for address "${address}":`, {
      found: !!schedules[address],
      slotsCount: arr.length
    });
    
    if (arr.length === 0) {
      console.log('‚ö†Ô∏è No slots found for this address');
      return res.json({ ok: true, slots: [] });
    }
    
    const now = new Date();
    const targetDate = new Date();
    targetDate.setDate(targetDate.getDate() + days);
    
    console.log('‚è∞ Time range:', {
      now: now.toISOString(),
      targetDate: targetDate.toISOString(),
      daysAhead: days
    });

    const slots = arr
      .filter(slot => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å–ª–æ—Ç–∞ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
          if (!slot.date || !slot.time || !slot.direction) {
            console.log('‚ö†Ô∏è Invalid slot structure:', slot);
            return false;
          }
          
          const slotDateTime = new Date(`${slot.date}T${slot.time}`);
          const directionMatch = slot.direction.trim().toLowerCase() === direction.trim().toLowerCase();
          const timeValid = !isNaN(slotDateTime.getTime());
          const timeInRange = slotDateTime >= now && slotDateTime <= targetDate;
          
          return directionMatch && timeValid && timeInRange;
        } catch (slotError) {
          console.error('‚ùå Error processing slot:', slot, slotError);
          return false;
        }
      })
      .map(slot => ({ date: slot.date, time: slot.time }))
      .sort((a, b) => {
        const dateA = new Date(`${a.date}T${a.time}`);
        const dateB = new Date(`${b.date}T${b.time}`);
        return dateA - dateB;
      });

    console.log('‚úÖ Final result:', {
      slotsFound: slots.length,
      slots: slots.slice(0, 5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ª–æ–≥–æ–≤
    });

    res.json({ ok: true, slots });
    
  } catch (error) {
    console.error('‚ùå Error in /slots endpoint:', error);
    console.error('Stack trace:', error.stack);
    
    res.status(500).json({ 
      ok: false, 
      error: 'Internal server error',
      message: error.message 
    });
  }
});
