import dotenv from "dotenv";
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import fs from 'fs/promises';
import { Telegraf, Markup } from 'telegraf';
import XLSX from 'xlsx';
import fetch from 'node-fetch';
import pkg from 'pg';
const { Pool } = pkg;

dotenv.config();

console.log('DATABASE_URL:', process.env.DATABASE_URL);
console.log('NODE_ENV:', process.env.NODE_ENV);

import fs from 'fs/promises';
import path from 'path';
import os from 'os';
import mysql from 'mysql2/promise'; // Using promise-based version

const connection = await mysql.createConnection({
  host: "459fa9d9406dcef02c7cbfca.twc1.net",
  user: "gen_user", 
  password: "6_$-(bJ8,hI;jw",
  database: "default_db",
  port: 3306,
  ssl: {
    ca: await fs.readFile(path.join(os.homedir(), '.cloud-certs', 'root.crt'), 'utf-8'),
    rejectUnauthorized: true
  }
});

let schedules = {}; // –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

pool.connect()
  .then(async () => {
    console.log("‚úÖ DB connected!");
    schedules = await loadSchedules(); // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  })
  .catch(err => console.error('‚ùå DB connection error:', err));



// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initDatabase() {
  try {
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS schedules (
        id SERIAL PRIMARY KEY,
        address VARCHAR(255) NOT NULL,
        schedule_data JSONB NOT NULL,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    await pool.query(`
      CREATE TABLE IF NOT EXISTS bot_users (
        user_id BIGINT PRIMARY KEY,
        first_name VARCHAR(255),
        username VARCHAR(255),
        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–º–µ–Ω
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_names (
        chat_id BIGINT PRIMARY KEY,
        custom_name VARCHAR(255) NOT NULL,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    console.log("‚úÖ Database tables initialized");
  } catch (err) {
    console.error("‚ùå Database initialization error:", err);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function addUser(userId, firstName, username) {
  try {
    await pool.query(
      'INSERT INTO bot_users (user_id, first_name, username) VALUES ($1, $2, $3) ON CONFLICT (user_id) DO NOTHING',
      [userId, firstName || '', username || '']
    );
    console.log("üë§ User added/updated: ${userId}");
  } catch (err) {
    console.error("‚ùå Failed to add user:", err);
  }
}

async function getUsersCount() {
  try {
    const result = await pool.query('SELECT COUNT(*) FROM bot_users');
    return parseInt(result.rows[0].count);
  } catch (err) {
    console.error("‚ùå Failed to get users count:", err);
    return 0;
  }
}

async function getAllUsers() {
  try {
    const result = await pool.query('SELECT user_id FROM bot_users');
    return result.rows.map(row => row.user_id);
  } catch (err) {
    console.error("‚ùå Failed to get all users:", err);
    return [];
  }
}

async function removeUser(userId) {
  try {
    await pool.query('DELETE FROM bot_users WHERE user_id = $1', [userId]);
    console.log("üë§ User removed: ${userId}");
  } catch (err) {
    console.error("‚ùå Failed to remove user:", err);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function setUserName(chatId, name) {
  try {
    await pool.query(
      'INSERT INTO user_names (chat_id, custom_name) VALUES ($1, $2) ON CONFLICT (chat_id) DO UPDATE SET custom_name = $2, updated_at = CURRENT_TIMESTAMP',
      [chatId, name]
    );
  } catch (err) {
    console.error("‚ùå Failed to set user name:", err);
  }
}

async function getUserName(chatId) {
  try {
    const result = await pool.query('SELECT custom_name FROM user_names WHERE chat_id = $1', [chatId]);
    return result.rows[0]?.custom_name || null;
  } catch (err) {
    console.error("‚ùå Failed to get user name:", err);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
async function saveSchedules(schedulesData) {
  try {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    await pool.query('DELETE FROM schedules');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    for (const [address, scheduleArray] of Object.entries(schedulesData)) {
      await pool.query(
        'INSERT INTO schedules (address, schedule_data) VALUES ($1, $2)',
        [address, JSON.stringify(scheduleArray)] // –î–æ–±–∞–≤–ª—è–µ–º JSON.stringify –¥–ª—è JSONB
      );
    }
    console.log("‚úÖ Schedules saved to database");
  } catch (err) {
    console.error("‚ùå Failed to save schedules:", err);
    throw err; // –î–æ–±–∞–≤–ª—è–µ–º throw –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
  }
}

async function loadSchedules() {
  try {
    const result = await pool.query('SELECT address, schedule_data FROM schedules');
    const schedules = {};
    
    for (const row of result.rows) {
      schedules[row.address] = row.schedule_data;
    }
    
    console.log("‚úÖ Loaded schedules for ${Object.keys(schedules).length} addresses");
    return schedules;
  } catch (err) {
    console.error("‚ùå Failed to load schedules:", err);
    return {};
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
await initDatabase();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const WELCOME_PHOTO = path.join(__dirname, 'public', 'assets', 'welcome.jpg');
const NEXT_PHOTO = path.join(__dirname, 'public', 'assets', 'next.jpg');


// Load config from .env
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const WEBAPP_URL = process.env.WEBAPP_URL;
const PORT = process.env.PORT || 3000;
const WEBHOOK_PATH = '/tg-webhook';

const awaitingScheduleUpload = new Set();
const awaitingCustomName = new Set();
const awaitingBroadcast = new Set();
const pendingReminders = new Map();
const pendingBookings = new Map();


if (!BOT_TOKEN || !ADMIN_CHAT_ID || !WEBAPP_URL) {
  console.error("‚ùå Missing BOT_TOKEN, ADMIN_CHAT_ID or WEBAPP_URL");
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
async function isAdminUser(ctx) {
  if (ctx.chat.id.toString() === ADMIN_CHAT_ID) {
    return true;
  }
  return false;
}

// Initialize bot
const bot = new Telegraf(BOT_TOKEN);


bot.command('check_data', async (ctx) => {
  if (ctx.chat.id.toString() !== ADMIN_CHAT_ID) return;
  
  // Split data into smaller chunks
  const data = JSON.stringify(schedules, null, 2);
  const chunkSize = 4000; // Leave some buffer
  
  for (let i = 0; i < data.length; i += chunkSize) {
    const chunk = data.slice(i, i + chunkSize);
    await ctx.reply(chunk);
  }
});

// Set up menu commands
try {
  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É start)
  const publicCommands = [
    { command: 'start', description: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' },
    { command: 'contacts', description: '–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏' }
  ];
  await bot.telegram.setMyCommands(publicCommands);

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É update_schedule)
  const adminGroupCommands = [
    { command: 'update_schedule', description: '–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' },
    { command: 'cancel_schedule', description: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' },
    { command: 'users_count', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
    { command: 'broadcast', description: '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è' }
  ];
  await bot.telegram.setMyCommands(adminGroupCommands, {
    scope: { type: 'chat', chat_id: Number(ADMIN_CHAT_ID) }  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
  });

} catch (err) {
  console.log('Command menu setup:', err);
}

// Function to send a message to a user and handle blocked users
async function sendMessageToUser(userId, message) {
  try {
    await bot.telegram.sendMessage(userId, message);
  } catch (error) {
    if (error.code === 403) {
      console.error(`User ${userId} has blocked the bot. Removing from database.`);
      await removeUser(userId); // Remove the user from the database
    } else {
      console.error(`Failed to send message to user ${userId}:`, error.message);
    }
  }
}

// Update schedule function
async function updateScheduleFromExcel(filePath) {
  const workbook = XLSX.readFile(filePath);
  const sheet = workbook.Sheets[workbook.SheetNames[0]];
  const data = XLSX.utils.sheet_to_json(sheet);

  const newSchedules = {};

  data.forEach(row => {
    let dateValue = row.date;
    if (typeof dateValue === 'number') {
      dateValue = new Date((dateValue - 25569) * 86400 * 1000);
    } else {
      dateValue = new Date(dateValue);
    }
    const formattedDate = dateValue.toISOString().split('T')[0];

    if (!newSchedules[row.address]) {
      newSchedules[row.address] = [];
    }

    const orderedEntry = {
      date: formattedDate,
      time: row.time,
      direction: row.direction.trim(),
      address: row.address.trim()
    };

    newSchedules[row.address].push(orderedEntry);
  });

  console.log('Generated schedules:', newSchedules);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
  await saveSchedules(newSchedules);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  schedules = newSchedules;

  return newSchedules;
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞
async function updateScheduleFromBuffer(buffer) {
  try {
    console.log("üìä Starting to process Excel buffer...");
    
    // –ß–∏—Ç–∞–µ–º –±—É—Ñ–µ—Ä –∫–∞–∫ Excel —Ñ–∞–π–ª
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    console.log("üìã Workbook sheets:", workbook.SheetNames);
    
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(sheet);
    
    console.log("üìä Raw data from Excel:", data.length, 'rows');
    if (data.length > 0) {
      console.log("üìä First row sample:", data[0]);
    }

    const newSchedules = {};
    let processedRows = 0;
    let errorRows = 0;

    data.forEach((row, index) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!row.date || !row.time || !row.direction || !row.address) {
          console.log("‚ö†Ô∏è Row ${index + 1} missing required fields:", row);
          errorRows++;
          return;
        }

        let dateValue = row.date;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        if (typeof dateValue === 'number') {
          // Excel serial date
          dateValue = new Date((dateValue - 25569) * 86400 * 1000);
        } else {
          dateValue = new Date(dateValue);
        }
        
        if (isNaN(dateValue.getTime())) {
          console.log("‚ö†Ô∏è Row ${index + 1} invalid date:", row.date);
          errorRows++;
          return;
        }
        
        const formattedDate = dateValue.toISOString().split('T')[0];
        const address = row.address.toString().trim();

        if (!newSchedules[address]) {
          newSchedules[address] = [];
        }

        const orderedEntry = {
          date: formattedDate,
          time: row.time.toString().trim(),
          direction: row.direction.toString().trim(),
          address: address
        };

        newSchedules[address].push(orderedEntry);
        processedRows++;
        
      } catch (error) {
        console.error("‚ùå Error processing row ${index + 1}:", error, row);
        errorRows++;
      }
    });

    console.log("üìä Processing complete:", {
      processedRows,
      errorRows,
      addresses: Object.keys(newSchedules).length
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await saveSchedules(newSchedules);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    schedules = newSchedules;
    
    console.log("‚úÖ Schedules updated successfully");

    return {
      newSchedules,
      processedRows,
      errorRows
    };
    
  } catch (error) {
    console.error("‚ùå Error in updateScheduleFromBuffer:", error);
    throw error;
  }
}

bot.start(async ctx => {
  const firstName = ctx.from.first_name || '–∫–ª–∏–µ–Ω—Ç';
  const username = ctx.from.username || '';
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
  await addUser(userId, firstName, username);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–∑ Telegram –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
  await setUserName(chatId, firstName);
  
  // Send welcome photo first
  if (pendingReminders.has(chatId)) {
      const {t3, t15, t24 } = pendingReminders.get(chatId);
      clearTimeout(t3);
      clearTimeout(t15);
      clearTimeout(t24);
    }
  
    const t15 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      "${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà",
  Markup.inlineKeyboard([
    Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
  ])
    );
  },15 * 60 * 1000);

  const t3 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      "üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! üèÉ‚Äç‚ôÄÔ∏è –ú–µ—Å—Ç–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è ‚Äî —É—Å–ø–µ–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë!",
      Markup.inlineKeyboard([
    Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
  ])
    );
  }, 3 * 60 * 60 * 1000);

  const t24 = setTimeout(() => {
      bot.telegram.sendMessage(
        chatId, 
        "${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà",
        Markup.inlineKeyboard([
    Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
  ])
      );
    }, 24 * 60 * 60 * 1000);

  pendingReminders.set(chatId, {t3, t15, t24 });

  await ctx.replyWithPhoto({ source: WELCOME_PHOTO });
  
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –Ω–∞—à –±—É–¥—É—â–∏–π –∫–ª–∏–µ–Ω—Ç!\n` +
    `–Ø –õ–µ—è ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–∏–∏ –±–∞–ª–µ—Ç–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∏ LEVITA!\n\n` +
    `–ú–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏ "${firstName}", –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–Ω–æ —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ?`,
    Markup.keyboard([['–î–∞', '–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è']])
      .resize()
      .oneTime()
  );
});

bot.hears('–î–∞', async ctx => {
  await ctx.replyWithPhoto({ source: NEXT_PHOTO });
  
  return ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ["üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω", "üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ])
    .resize()
  );
});

bot.hears('üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', ctx => {
  ctx.reply(
    '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É:',
    Markup.inlineKeyboard([
      Markup.button.webApp('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ', WEBAPP_URL)
    ])
  );
});

bot.hears("üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ctx => {
  return ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∏ –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.',
    Markup.keyboard([
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', {text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true}]
    ])
    .resize()
  );
});

bot.hears("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", ctx => {
  return ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ["üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω", "üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ])
    .resize()
  );
});

bot.hears('–ö–æ–Ω—Ç–∞–∫—Ç—ã', ctx => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
    –°–≤–æ–±–æ–¥—ã 6 ‚Äî +7-928-40-85-968
    –í–∏–¥–æ–≤–∞ 210–î ‚Äî +7-993-32-12-000
    –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî +7-993-30-10-137`
  );
});

bot.hears('–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è', async ctx => {
  awaitingCustomName.add(ctx.chat.id);
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:');
});

bot.on('text', async (ctx) => {
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
  const text = ctx.message.text;
  const botUsername = ctx.botInfo.username;
  
  if (text.startsWith(`/update_schedule@${botUsername}`)) {
    console.log("üìù –ö–æ–º–∞–Ω–¥–∞ update_schedule —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:", ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω");
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    console.log("‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ");
    awaitingScheduleUpload.add(ctx.chat.id);
    return ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  }
  
  if (text.startsWith(`/cancel_schedule@${botUsername}`)) {
    console.log("üìù –ö–æ–º–∞–Ω–¥–∞ cancel_schedule —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:", ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
    
    if (awaitingScheduleUpload.has(ctx.chat.id)) {
      awaitingScheduleUpload.delete(ctx.chat.id);
      ctx.reply("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
    } else {
      ctx.reply("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞");
    }
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã users_count —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
  if (text.startsWith(`/users_count@${botUsername}`)) {
  console.log("üìù –ö–æ–º–∞–Ω–¥–∞ users_count —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:", ctx.chat.id);
  console.log('Using DB URL:', process.env.DATABASE_URL);

  if (!(await isAdminUser(ctx))) {
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
  }

  try {
    const result = await pool.query('SELECT COUNT(*) FROM bot_users');
    const count = result.rows[0].count;
    return ctx.reply("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: ${count}");
  } catch (err) {
    console.error("‚ùå Failed to get user count:", err);
    return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
  }
}

  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã broadcast —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
  if (text.startsWith(`/broadcast@${botUsername}`)) {
    console.log("üìù –ö–æ–º–∞–Ω–¥–∞ broadcast —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:", ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
    
    awaitingBroadcast.add(ctx.chat.id);
    return ctx.reply("üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:");
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏
  if (awaitingCustomName.has(ctx.chat.id)) {
    const customName = ctx.message.text;
    await setUserName(ctx.chat.id, customName);
    awaitingCustomName.delete(ctx.chat.id);
    
    await ctx.replyWithPhoto({ source: NEXT_PHOTO });
    await ctx.reply(
      `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${customName}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      Markup.keyboard([
        ["üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω", "üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
        ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ])
      .resize()
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
  if (awaitingBroadcast.has(ctx.chat.id)) {
     if (!(await isAdminUser(ctx))) {
       awaitingBroadcast.delete(ctx.chat.id);
       return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
     }
    
     const broadcastMessage = text;
     awaitingBroadcast.delete(ctx.chat.id);
    
     await ctx.reply("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...");
    
     let successCount = 0;
     let errorCount = 0;
     
     const allUsers = await getAllUsers();
    
     for (const userId of allUsers) {
       try {
         await sendMessageToUser(userId, broadcastMessage);
         successCount++;
         await new Promise(resolve => setTimeout(resolve, 50));
       } catch (error) {
         errorCount++;
         console.error(`Failed to send message to user ${userId}:`, error.message);
        
         if (error.message.includes('blocked') || error.message.includes('user not found') || error.message.includes('chat not found')) {
           await removeUser(userId);
         }
       }
     }
    
     const finalCount = await getUsersCount();
     await ctx.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalCount}");
     return;
   }
  });

bot.command('contacts', ctx => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
  –°–≤–æ–±–æ–¥—ã 6 ‚Äî 8-928-00-00-000
  –í–∏–¥–æ–≤–∞ 210–î ‚Äî 8-928-00-00-000
  –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî 8-928-00-00-000`
  );
});

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ update_schedule
bot.command('update_schedule', async (ctx) => {
  console.log("üìù –ö–æ–º–∞–Ω–¥–∞ update_schedule –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id, 'ADMIN_CHAT_ID:", ADMIN_CHAT_ID);
  console.log("üîç –¢–∏–ø —á–∞—Ç–∞:", ctx.chat.type);
  
  if (!(await isAdminUser(ctx))) {
    console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω");
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
  }
  
  console.log("‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ");
  awaitingScheduleUpload.add(ctx.chat.id);
  console.log("üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö:", Array.from(awaitingScheduleUpload));
  
  await ctx.reply("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫–∏: date, time, direction, address");
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
bot.command('cancel_schedule', async (ctx) => {
  console.log("üìù –ö–æ–º–∞–Ω–¥–∞ cancel_schedule –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:", ctx.chat.id);
  
  if (!(await isAdminUser(ctx))) {
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
  }
  
  if (awaitingScheduleUpload.has(ctx.chat.id)) {
    awaitingScheduleUpload.delete(ctx.chat.id);
    ctx.reply("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
  } else {
    ctx.reply("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.command('users_count', async (ctx) => {
  try {
    const res = await pool.query('SELECT COUNT(*) FROM bot_users');
    const count = parseInt(res.rows[0].count, 10);
    return ctx.reply("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: ${count}");
  } catch (err) {
    console.error("‚ùå Failed to get users count:", err);
    return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
});



// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
bot.command('broadcast', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
  }
  
  awaitingBroadcast.add(ctx.chat.id);
  ctx.reply("üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:");
});

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
bot.on('document', async (ctx) => {
  console.log("üìÑ Document received from:", ctx.chat.id);
  console.log("üìã Awaiting upload list:", Array.from(awaitingScheduleUpload));
  
  if (!awaitingScheduleUpload.has(ctx.chat.id)) {
    console.log("‚ùå User not in awaiting list");
    return;
  }
  
  if (!(await isAdminUser(ctx))) {
    console.log("‚ùå User is not admin");
    return;
  }

  awaitingScheduleUpload.delete(ctx.chat.id);
  
  try {
    const fileName = ctx.message.document.file_name;
    console.log(' Processing file:', fileName);
    
    if (!fileName.endsWith('.xlsx') && !fileName.endsWith('.xls')) {
      return ctx.reply(' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)');
    }

    await ctx.reply(' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');

    const fileLink = await ctx.telegram.getFileLink(ctx.message.document.file_id);
    console.log(' File link obtained:', fileLink.href);
    
    const response = await fetch(fileLink.href);
    const buffer = await response.buffer();
    console.log(' Buffer size:', buffer.length, 'bytes');

    const result = await updateScheduleFromBuffer(buffer);
    
    await ctx.reply("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.processedRows}\nüè¢ –°—Ç—É–¥–∏–π: ${Object.keys(result.newSchedules).length}\n‚ö†Ô∏è –û—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö: ${result.errorRows}");
    
  } catch (error) {
    console.error(' –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
    ctx.reply(` –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

bot.command('check_schedules', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply(' –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  const addressCount = Object.keys(schedules).length;
  const totalSlots = Object.values(schedules).reduce((sum, arr) => sum + arr.length, 0);
  
  let message = ` –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:\n`;
  message += ` –°—Ç—É–¥–∏–π: ${addressCount}\n`;
  message += ` –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${totalSlots}\n\n`;
  
  if (addressCount > 0) {
    message += `–°—Ç—É–¥–∏–∏:\n`;
    Object.keys(schedules).forEach(address => {
      message += `‚Ä¢ ${address}: ${schedules[address].length} —Å–ª–æ—Ç–æ–≤\n`;
    });
  } else {
    message += ` –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`;
  }
  
  await ctx.reply(message);
});

bot.on('contact', async ctx => {
  const chatId = ctx.chat.id;
  
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
  
  // Clear reminders if exist
  if (pendingReminders.has(chatId)) {
    const {t3, t15, t24 } = pendingReminders.get(chatId);
    clearTimeout(t3);
    clearTimeout(t15);
    clearTimeout(t24);
    pendingReminders.delete(chatId);
  }

  const { first_name, phone_number } = ctx.message.contact;
  const telegram_id = ctx.from.id;
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const userName = await getUserName(chatId) || first_name;
  
  // –î–æ–±–∞–≤–ª—è–µ–º + –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const formattedPhone = phone_number.startsWith('+') ? phone_number : `+${phone_number}`;
  
  // Get stored booking data
  const bookingData = pendingBookings.get(telegram_id);
  
  if (bookingData) {
    // This is a form submission - send complete booking data
    const msg = `–ù–æ–≤–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞:
      –¶–µ–ª—å: ${bookingData.goal}
      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${bookingData.direction}
      –°—Ç—É–¥–∏—è: ${bookingData.address}
      –°–ª–æ—Ç: ${bookingData.slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
      –ò–º—è: ${userName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
      ID: ${telegram_id}`;
      
    await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
    pendingBookings.delete(telegram_id);
  } else {
    // This is a callback request
    const msg = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫:
      –ò–º—è: ${userName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
      ID: ${telegram_id}`;
      
    await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
  }
  
  await ctx.reply('–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', Markup.removeKeyboard());
});


// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.hears(/.*/, async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
});

bot.on('callback_query', async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
});

// Express App
const app = express();
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Endpoints
app.post('/slots', (req, res) => {
  const { direction, address, days = 3 } = req.body;
  const now = new Date();
  const targetDate = new Date();
  targetDate.setDate(targetDate.getDate() + days);

  const arr = schedules[address] || [];

  const slots = arr
    .filter(slot => {
      const slotDateTime = new Date(`${slot.date}T${slot.time}`);
      const match = slot.direction.trim() === direction.trim();
      
      return match && !isNaN(slotDateTime.getTime()) && slotDateTime >= now && slotDateTime <= targetDate;
    })
    .map(slot => ({ date: slot.date, time: slot.time }))
    .sort((a, b) => {
      const dateA = new Date(`${a.date}T${a.time}`);
      const dateB = new Date(`${b.date}T${b.time}`);
      return dateA - dateB;
    });

  res.json({ ok: true, slots });
});



// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/user-name/:telegram_id', async (req, res) => {
  const telegramId = parseInt(req.params.telegram_id);
  const userName = await getUserName(telegramId);
  
  res.json({ 
    ok: true, 
    name: userName 
  });
});


app.post('/submit', async (req, res) => {
  try {
    const bookingData = req.body;
    // Store booking data
    pendingBookings.set(bookingData.telegram_id, bookingData);
    
    await bot.telegram.sendMessage(
      bookingData.telegram_id,
      '–°–ø–∞—Å–∏–±–æ! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.',
      {
        reply_markup: {
          keyboard: [[{ text: "üì≤ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", request_contact: true }]],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      }
    );
    
    res.json({ ok: true });
  } catch (err) {
    console.error('Error in /submit:', err);
    res.status(500).json({ ok: false, error: err.message });
  }
});

async function sendBookingToAdmin(bookingData) {
  const { goal, direction, address, name, phone, slot, telegram_id } = bookingData;
  
  const msg = `–ù–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫–∞:
    –¶–µ–ª—å: ${goal}
    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}
    –°—Ç—É–¥–∏—è: ${address}
    –°–ª–æ—Ç: ${slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
    –ò–º—è: ${name}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
    ID: ${telegram_id}`;
    
  return await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
}

// Telegram webhook callback
app.use(bot.webhookCallback(WEBHOOK_PATH));

// At app startup
console.log(' Bot starting up...');
console.log('Environment:', {
  PORT,
  WEBHOOK_PATH,
  WEBAPP_URL
});

// For webhook setup
app.listen(PORT, async () => {
  console.log(` Server starting on port ${PORT}`);
  try {
    await bot.telegram.deleteWebhook();
    console.log(' Old webhook deleted');
    await bot.telegram.setWebhook(`${WEBAPP_URL}${WEBHOOK_PATH}`);
    console.log(' New webhook set successfully');
  } catch (e) {
    console.log(' Webhook error:', e);
  }
});

// Graceful shutdown
process.once('SIGINT', () => {
  if (bot.isRunning) {
    bot.stop('SIGINT')
  }
});

process.once('SIGTERM', () => {
  if (bot.isRunning) {
    bot.stop('SIGTERM')
  }
})
